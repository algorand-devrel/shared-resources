#pragma version 10

smart_contracts.shared_resources.contract.SharedResources.approval_program:
    intcblock 0 1 32 8
    bytecblock "assets" 0x068101
    callsub __puya_arc4_router__
    return


// smart_contracts.shared_resources.contract.SharedResources.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@8
    pushbytess 0xbec76d87 0x9a4c5a30 0xc47e8a93 0x3c7daa97 // method "bootstrap()void", method "access_balance(address[])void", method "share_resource()void", method "get_assets()uint64[]"
    txna ApplicationArgs 0
    match __puya_arc4_router___bootstrap_route@2 __puya_arc4_router___access_balance_route@3 __puya_arc4_router___share_resource_route@4 __puya_arc4_router___get_assets_route@5
    intc_0 // 0
    retsub

__puya_arc4_router___bootstrap_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub bootstrap
    intc_1 // 1
    retsub

__puya_arc4_router___access_balance_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub access_balance
    intc_1 // 1
    retsub

__puya_arc4_router___share_resource_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    intc_1 // 1
    retsub

__puya_arc4_router___get_assets_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_assets
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@8:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@12
    txn ApplicationID
    !
    assert // is creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@12:
    intc_0 // 0
    retsub


// smart_contracts.shared_resources.contract.SharedResources.bootstrap() -> void:
bootstrap:
    proto 0 0
    bytec_0 // "assets"
    box_len
    bury 1
    !
    assert // App was already bootstrapped
    bytec_0 // "assets"
    box_del
    pop
    bytec_0 // "assets"
    pushbytes 0x0000
    box_put
    pushint 3500 // 3500
    intc_0 // 0
    callsub ensure_budget
    intc_0 // 0

bootstrap_for_header@1:
    frame_dig 0
    intc_2 // 32
    <
    bz bootstrap_after_for@5
    itxn_begin
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    pushint 10 // 10
    itxn_field ConfigAssetTotal
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedAssetID
    bytec_0 // "assets"
    box_get
    assert // check self.assets exists
    extract 2 0
    swap
    itob
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    bytec_0 // "assets"
    box_del
    pop
    bytec_0 // "assets"
    swap
    box_put
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b bootstrap_for_header@1

bootstrap_after_for@5:
    retsub


// smart_contracts.shared_resources.contract.SharedResources.access_balance(addrs: bytes) -> void:
access_balance:
    proto 1 0
    intc_0 // 0
    dup
    pushbytes ""
    dup
    pushint 3500 // 3500
    intc_0 // 0
    callsub ensure_budget
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0

access_balance_for_header@1:
    frame_dig 5
    frame_dig 4
    <
    bz access_balance_after_for@8
    frame_dig -1
    extract 2 0
    frame_dig 5
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    frame_bury 0
    bytec_0 // "assets"
    box_get
    swap
    dup
    cover 2
    frame_bury 1
    assert // check self.assets exists
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 3

access_balance_for_header@3:
    frame_dig 3
    frame_dig 2
    <
    bz access_balance_after_for@6
    frame_dig 1
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig 0
    swap
    asset_holding_get AssetBalance
    bury 1
    assert // account opted into asset
    intc_1 // 1
    +
    frame_bury 3
    b access_balance_for_header@3

access_balance_after_for@6:
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b access_balance_for_header@1

access_balance_after_for@8:
    retsub


// smart_contracts.shared_resources.contract.SharedResources.get_assets() -> bytes:
get_assets:
    proto 0 1
    bytec_0 // "assets"
    box_get
    assert // check self.assets exists
    retsub


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_after_while@7:
    retsub
